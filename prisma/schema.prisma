generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  githubId             BigInt                @id @unique
  installationId       BigInt
  githubUsername       String?               @unique
  superteamUsername    String?               @unique
  leetcodeUsername     String?               @unique
  codeforcesUsername   String?               @unique
  hackerrankUsername   String?               @unique
  codechefUsername     String?               @unique
  gfgUsername          String?               @unique
  gitlabUsername       String?               @unique
  email                String?               @unique
  emails               String[]              @default([])
  verifiedEmail        Boolean               @default(false)
  totalPoints          Int                   @default(0)
  emailOtp             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt
  CodeChefProfile      CodeChefProfile?
  GFGProfile           GFGProfile?
  GithubDevProfile     GithubDevProfile?
  HackerrankProfile    HackerrankProfile?
  LeetcodeProfile      LeetcodeProfile?
  Sponsors             Sponsor[]             @relation("UserSponsors")
  submissions          Submission[]
  SuperteamEarnProfile SuperteamEarnProfile?
}

model GithubDevProfile {
  githubId                  BigInt   @id @unique
  stars                     Int
  forks                     Int
  forkedRepos               Int
  originalRepos             Int
  followers                 Int
  totalCommits              Int
  repositoriesContributedTo Int
  pullRequests              Int
  mergedPullRequests        Int
  totalIssues               Int
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now()) @updatedAt
  User                      User     @relation(fields: [githubId], references: [githubId])
}

model HackerrankProfile {
  githubId      BigInt   @id @unique
  currentPoints Int
  stars         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  User          User     @relation(fields: [githubId], references: [githubId])
}

model GFGProfile {
  githubId       BigInt   @id @unique
  score          Int
  problemsSolved Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  User           User     @relation(fields: [githubId], references: [githubId])
}

model CodeChefProfile {
  githubId      BigInt   @id @unique
  currentRating Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  User          User     @relation(fields: [githubId], references: [githubId])
}

model LeetcodeProfile {
  githubId   BigInt   @id @unique
  easyQues   Int
  mediumQues Int
  hardQues   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  User       User     @relation(fields: [githubId], references: [githubId])
}

model SuperteamEarnProfile {
  githubId       BigInt   @id @unique
  participations Int
  wins           Int
  totalWinnings  Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  User           User     @relation(fields: [githubId], references: [githubId])
}

model Sponsor {
  githubId    BigInt
  type        String
  image       String?
  name        String
  link        String?
  description String
  twitter     String
  telegram    String
  discord     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  id          Int      @id @default(autoincrement())
  bounties    Bounty[] @relation("SponsorBounties")
  User        User     @relation("UserSponsors", fields: [githubId], references: [githubId])
}

model Bounty {
  id                Int          @id @default(autoincrement())
  bountyname        String
  price             Int
  bountyDescription String
  skills            String[]
  time              String
  createdAt         DateTime     @default(now())
  primaryContact    String
  sponsorId         Int?
  status            Int          @default(0)
  timeExtendedTo    String?
  updatedAt         DateTime     @default(now()) @updatedAt
  sponsor           Sponsor?     @relation("SponsorBounties", fields: [sponsorId], references: [id])
  submissions       Submission[]
}

model Submission {
  id        Int      @id @default(autoincrement())
  links     String[] @default([])
  status    Int      @default(0)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  githubId  BigInt
  bountyId  Int
  bounty    Bounty   @relation(fields: [bountyId], references: [id])
  user      User     @relation(fields: [githubId], references: [githubId])
}
